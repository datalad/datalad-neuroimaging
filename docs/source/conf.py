# -*- coding: utf-8 -*-
#
# datalad_neuroimaging documentation build configuration file, created by
# sphinx-quickstart on Tue Oct 13 08:41:19 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import sys
import os

import datetime
from os.path import (
    abspath,
    dirname,
    exists,
    join as opj,
)
from os import pardir

import datalad_neuroimaging


def setup(sphinx):
    sys.path.insert(0, os.path.abspath('utils'))  # travis
    sys.path.insert(0, os.path.abspath(opj(pardir, 'utils')))  # RTD
    from pygments_ansi_color import AnsiColorLexer
    sphinx.add_lexer("ansi-color", AnsiColorLexer)


# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#sys.path.insert(0, os.path.abspath('.'))

# generate missing pieces
for setup_py_path in (opj(pardir, 'setup.py'),  # travis
                      opj(pardir, pardir, 'setup.py')):  # RTD
    if exists(setup_py_path):
        sys.path.insert(0, os.path.abspath(dirname(setup_py_path)))

        # Build manpage
        try:
            os.system(
                '{} build_manpage --cmdsuite {} --manpath {} --rstpath {}'.format(
                    setup_py_path,
                    'datalad_neuroimaging:command_suite',
                    abspath(opj(dirname(setup_py_path), 'build', 'man')),
                    opj(dirname(__file__), 'generated', 'man')))
        except:
            # shut up and do your best
            pass

        # Build examples - different set of arguments
        try:
            os.system(
                '{} build_examples --expath {} --rstpath {}'.format(
                    setup_py_path,
                    abspath(opj(dirname(__file__), pardir, 'examples')),
                    opj(dirname(__file__), 'generated', 'examples')))
        except:
            # like above
            pass

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.autosummary',
    'sphinx.ext.doctest',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.mathjax',
    'sphinx.ext.ifconfig',
    'sphinx.ext.inheritance_diagram',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
]

# for the module reference
autosummary_generate = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = u'Datalad for neuroimaging'
copyright = u'2018-{}, DataLad team'.format(datetime.datetime.now().year)
author = u'DataLad team'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
version = datalad_neuroimaging.__version__
release = version

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}

# smart quotes are incompatible with the RST flavor of the generated manpages
# but see `smartquotes_action` for more fine-grained control, in case
# some of this functionality is needed
smartquotes = False

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = '_static/datalad_logo.png'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If true, the index is split into individual pages for each letter.
html_split_index = True

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# Output file base name for HTML help builder.
htmlhelp_basename = 'datalad_neuroimagingdoc'

# -- Options for LaTeX output ---------------------------------------------

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
  (master_doc, 'datalad_neuroimaging.tex', u'datalad_neuroimaging Documentation',
   u'DataLad team', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'datalad', u'datalad Documentation',
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
  (master_doc, 'datalad', u'datalad Documentation',
   author, 'datalad', 'One line description of project.',
   'Miscellaneous'),
]
